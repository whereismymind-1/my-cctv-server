apiVersion: v1
kind: ConfigMap
metadata:
  name: logstash-config
  namespace: cctv-streaming
data:
  logstash.yml: |
    http.host: "0.0.0.0"
    path.config: /usr/share/logstash/pipeline
    xpack.monitoring.enabled: true
    xpack.monitoring.elasticsearch.hosts: ["http://elasticsearch:9200"]
  
  pipeline.conf: |
    input {
      beats {
        port => 5044
      }
      
      tcp {
        port => 5000
        codec => json
      }
      
      udp {
        port => 5514
        type => syslog
      }
    }
    
    filter {
      if [type] == "syslog" {
        grok {
          match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" }
        }
        date {
          match => [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
        }
      }
      
      if [kubernetes] {
        mutate {
          add_field => {
            "app" => "%{[kubernetes][labels][app]}"
            "namespace" => "%{[kubernetes][namespace]}"
            "pod" => "%{[kubernetes][pod][name]}"
          }
        }
      }
      
      if [app] == "backend" {
        json {
          source => "message"
          target => "backend_log"
        }
        
        if [backend_log][level] {
          mutate {
            add_field => { "log_level" => "%{[backend_log][level]}" }
          }
        }
      }
      
      if [app] == "frontend" {
        grok {
          match => { 
            "message" => "%{TIMESTAMP_ISO8601:timestamp} \[%{LOGLEVEL:level}\] %{GREEDYDATA:msg}"
          }
        }
      }
    }
    
    output {
      elasticsearch {
        hosts => ["elasticsearch:9200"]
        index => "cctv-%{[app]}-%{+YYYY.MM.dd}"
        template_name => "cctv"
        template => "/usr/share/logstash/templates/cctv-template.json"
        template_overwrite => true
      }
      
      if [log_level] == "ERROR" or [log_level] == "FATAL" {
        stdout {
          codec => rubydebug
        }
      }
    }
  
  cctv-template.json: |
    {
      "index_patterns": ["cctv-*"],
      "settings": {
        "number_of_shards": 1,
        "number_of_replicas": 0,
        "index.refresh_interval": "5s"
      },
      "mappings": {
        "properties": {
          "@timestamp": { "type": "date" },
          "app": { "type": "keyword" },
          "namespace": { "type": "keyword" },
          "pod": { "type": "keyword" },
          "log_level": { "type": "keyword" },
          "message": { "type": "text" },
          "backend_log": {
            "properties": {
              "timestamp": { "type": "date" },
              "level": { "type": "keyword" },
              "context": { "type": "keyword" },
              "message": { "type": "text" },
              "trace": { "type": "text" }
            }
          }
        }
      }
    }

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: logstash
  namespace: cctv-streaming
spec:
  replicas: 1
  selector:
    matchLabels:
      app: logstash
  template:
    metadata:
      labels:
        app: logstash
    spec:
      containers:
      - name: logstash
        image: docker.elastic.co/logstash/logstash:8.9.0
        ports:
        - containerPort: 5044
          name: beats
        - containerPort: 5000
          name: tcp
        - containerPort: 5514
          name: syslog
        - containerPort: 9600
          name: api
        env:
        - name: LS_JAVA_OPTS
          value: "-Xmx256m -Xms256m"
        volumeMounts:
        - name: logstash-config
          mountPath: /usr/share/logstash/config/logstash.yml
          subPath: logstash.yml
        - name: logstash-config
          mountPath: /usr/share/logstash/pipeline/pipeline.conf
          subPath: pipeline.conf
        - name: logstash-config
          mountPath: /usr/share/logstash/templates/cctv-template.json
          subPath: cctv-template.json
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /
            port: 9600
          initialDelaySeconds: 60
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 9600
          initialDelaySeconds: 30
          periodSeconds: 5
      volumes:
      - name: logstash-config
        configMap:
          name: logstash-config

---

apiVersion: v1
kind: Service
metadata:
  name: logstash
  namespace: cctv-streaming
spec:
  selector:
    app: logstash
  ports:
  - port: 5044
    targetPort: 5044
    name: beats
    protocol: TCP
  - port: 5000
    targetPort: 5000
    name: tcp
    protocol: TCP
  - port: 5514
    targetPort: 5514
    name: syslog
    protocol: UDP
  type: ClusterIP