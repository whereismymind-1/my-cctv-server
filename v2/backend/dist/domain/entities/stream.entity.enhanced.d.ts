import { StreamSettings } from '../value-objects/stream-settings.vo';
import { StreamStatus } from '../value-objects/stream-status.vo';
import { StreamKey } from '../value-objects/stream-key.vo';
export declare class StreamEntity {
    readonly id: string;
    readonly ownerId: string;
    readonly title: string;
    readonly description: string | null;
    readonly thumbnail: string | null;
    readonly streamKey: StreamKey;
    readonly settings: StreamSettings;
    private _status;
    private _viewerCount;
    private _peakViewers;
    private _totalComments;
    readonly createdAt: Date;
    private _startedAt;
    private _endedAt;
    private _lastActivityAt;
    private readonly ownerLevel;
    private static readonly MIN_TITLE_LENGTH;
    private static readonly MAX_TITLE_LENGTH;
    private static readonly MAX_DESCRIPTION_LENGTH;
    private static readonly MAX_DURATION;
    private static readonly MIN_STREAM_INTERVAL;
    constructor(id: string, ownerId: string, title: string, description: string | null, thumbnail: string | null, streamKey: StreamKey, settings: StreamSettings, _status: StreamStatus, _viewerCount: number, _peakViewers: number, _totalComments: number, createdAt: Date, _startedAt: Date | null, _endedAt: Date | null, _lastActivityAt: Date, ownerLevel?: number);
    private validateInvariants;
    private validateStatusTransition;
    start(): void;
    end(): {
        duration: number;
        avgViewers: number;
        engagement: number;
    };
    addViewer(): void;
    removeViewer(): void;
    addComment(): void;
    private getMaxViewers;
    private calculateAverageViewers;
    private calculateEngagement;
    shouldAutoEnd(): boolean;
    static canCreateNewStream(lastStreamEndedAt: Date | null, activeStreamCount: number, userLevel: number): {
        allowed: boolean;
        reason?: string;
    };
    getStreamQuality(): 'excellent' | 'good' | 'fair' | 'poor';
    getMetrics(): {
        duration: number;
        viewerCount: number;
        peakViewers: number;
        totalComments: number;
        engagement: number;
        quality: string;
        avgViewers: number;
    };
    hasInappropriateContent(): boolean;
    updateSettings(newSettings: Partial<StreamSettings>): void;
    canUserModerate(userId: string, userLevel: number): boolean;
    private getDuration;
    static create(ownerId: string, ownerLevel: number, title: string, description: string | null, thumbnail: string | null): StreamEntity;
    private static generateId;
    get status(): StreamStatus;
    get viewerCount(): number;
    get peakViewers(): number;
    get totalComments(): number;
    get startedAt(): Date | null;
    get endedAt(): Date | null;
    get lastActivityAt(): Date;
    get isLive(): boolean;
    get isEnded(): boolean;
}
