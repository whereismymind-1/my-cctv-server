version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: cctv-postgres
    restart: always
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - cctv-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: cctv-redis
    restart: always
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis123}
    volumes:
      - redis_data:/data
    networks:
      - cctv-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # RTMP/HLS Streaming Server
  rtmp:
    image: alfg/nginx-rtmp
    container_name: cctv-rtmp
    restart: always
    ports:
      - "1935:1935"
      - "8080:80"
    volumes:
      - ./nginx-rtmp/nginx.conf:/etc/nginx/nginx.conf:ro
      - rtmp_data:/tmp/hls
    networks:
      - cctv-network

  # Backend NestJS Application
  backend:
    image: ghcr.io/${GITHUB_REPOSITORY}-backend:${VERSION:-latest}
    container_name: cctv-backend
    restart: always
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
      JWT_SECRET: ${JWT_SECRET}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis123}
      CORS_ORIGIN: ${CORS_ORIGIN}
      RTMP_URL: rtmp://rtmp:1935/live
      HLS_URL: http://rtmp:80/hls
      SENTRY_DSN: ${SENTRY_DSN}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rtmp:
        condition: service_started
    networks:
      - cctv-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend React Application (served via nginx)
  frontend:
    image: ghcr.io/${GITHUB_REPOSITORY}-frontend:${VERSION:-latest}
    container_name: cctv-frontend
    restart: always
    ports:
      - "80:80"
      - "443:443"
    environment:
      VITE_API_URL: ${VITE_API_URL}
      VITE_WS_URL: ${VITE_WS_URL}
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
    networks:
      - cctv-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Optional - for SSL termination)
  nginx:
    image: nginx:alpine
    container_name: cctv-nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
    depends_on:
      - backend
      - frontend
    networks:
      - cctv-network

networks:
  cctv-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  rtmp_data: