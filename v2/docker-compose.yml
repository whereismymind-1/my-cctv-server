version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: danmaku_postgres
    environment:
      POSTGRES_DB: danmaku_live
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password123
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - danmaku_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d danmaku_live"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: danmaku_redis
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - danmaku_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Uncomment for production or when you want to run the backend in Docker
  # backend:
  #   build:
  #     context: ./backend
  #     dockerfile: Dockerfile
  #   container_name: danmaku_backend
  #   environment:
  #     DATABASE_HOST: postgres
  #     DATABASE_PORT: 5432
  #     DATABASE_USER: admin
  #     DATABASE_PASSWORD: password123
  #     DATABASE_NAME: danmaku_live
  #     REDIS_HOST: redis
  #     REDIS_PORT: 6379
  #     JWT_SECRET: ${JWT_SECRET:-dev-secret-key}
  #     NODE_ENV: ${NODE_ENV:-development}
  #   ports:
  #     - "3000:3000"
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   networks:
  #     - danmaku_network
  #   volumes:
  #     - ./backend:/app
  #     - /app/node_modules

volumes:
  postgres_data:
  redis_data:

networks:
  danmaku_network:
    driver: bridge