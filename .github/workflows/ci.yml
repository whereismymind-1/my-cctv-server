name: CI Pipeline

on:
  push:
    branches: [ main, develop, 'feature/**' ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  
jobs:
  # Backend Testing
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: v2/backend/package-lock.json
      
      - name: Install dependencies
        working-directory: v2/backend
        run: npm ci
      
      - name: Run linting
        working-directory: v2/backend
        run: npm run lint --if-present
      
      - name: Run unit tests
        working-directory: v2/backend
        run: npm test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          JWT_SECRET: test-secret
          REDIS_HOST: localhost
          REDIS_PORT: 6379
      
      - name: Run e2e tests
        working-directory: v2/backend
        run: npm run test:e2e
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          JWT_SECRET: test-secret
          REDIS_HOST: localhost
          REDIS_PORT: 6379
      
      - name: Generate coverage report
        working-directory: v2/backend
        run: npm run test:cov
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: v2/backend/coverage
          flags: backend
          name: backend-coverage

  # Frontend Testing
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: v2/frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: v2/frontend
        run: npm ci
      
      - name: Run linting
        working-directory: v2/frontend
        run: npm run lint --if-present
      
      - name: Run tests
        working-directory: v2/frontend
        run: npm test -- --run
      
      - name: Build application
        working-directory: v2/frontend
        run: npm run build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: v2/frontend/dist

  # Docker Build Test
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Build Backend Docker Image
        uses: docker/build-push-action@v4
        with:
          context: v2/backend
          push: false
          tags: cctv-backend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build Frontend Docker Image
        uses: docker/build-push-action@v4
        with:
          context: v2/frontend
          file: v2/frontend/Dockerfile.dev
          push: false
          tags: cctv-frontend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Test Docker Compose
        working-directory: v2
        run: |
          docker-compose config
          docker-compose up -d
          sleep 10
          docker-compose ps
          curl -f http://localhost:3000/health || exit 1
          docker-compose down

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: 'v2'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Backend dependency audit
        working-directory: v2/backend
        run: npm audit --audit-level=moderate
        continue-on-error: true
      
      - name: Frontend dependency audit
        working-directory: v2/frontend
        run: npm audit --audit-level=moderate
        continue-on-error: true